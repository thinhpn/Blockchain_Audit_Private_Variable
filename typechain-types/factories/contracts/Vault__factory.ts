/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Vault, VaultInterface } from "../../contracts/Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_password",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "thepassword",
        type: "bytes32",
      },
    ],
    name: "widthdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108c63803806108c68339818101604052810190610032919061013c565b61004e61004361005b60201b60201c565b61006360201b60201c565b8060018190555050610186565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506101368161016f565b92915050565b60006020828403121561014e57600080fd5b600061015c84828501610127565b91505092915050565b6000819050919050565b61017881610165565b811461018357600080fd5b50565b610731806101956000396000f3fe60806040526004361061004a5760003560e01c80630fa867061461004f578063715018a6146100785780638da5cb5b1461008f578063d0e30db0146100ba578063f2fde38b146100c4575b600080fd5b34801561005b57600080fd5b50610076600480360381019061007191906104c3565b6100ed565b005b34801561008457600080fd5b5061008d61017d565b005b34801561009b57600080fd5b506100a4610205565b6040516100b19190610564565b60405180910390f35b6100c261022e565b005b3480156100d057600080fd5b506100eb60048036038101906100e6919061049a565b6102ac565b005b808060015414610132576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101299061059f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610178573d6000803e3d6000fd5b505050565b6101856103a4565b73ffffffffffffffffffffffffffffffffffffffff166101a3610205565b73ffffffffffffffffffffffffffffffffffffffff16146101f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f0906105bf565b60405180910390fd5b61020360006103ac565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102366103a4565b73ffffffffffffffffffffffffffffffffffffffff16610254610205565b73ffffffffffffffffffffffffffffffffffffffff16146102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a1906105bf565b60405180910390fd5b565b6102b46103a4565b73ffffffffffffffffffffffffffffffffffffffff166102d2610205565b73ffffffffffffffffffffffffffffffffffffffff1614610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f906105bf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f9061057f565b60405180910390fd5b6103a1816103ac565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061047f816106cd565b92915050565b600081359050610494816106e4565b92915050565b6000602082840312156104ac57600080fd5b60006104ba84828501610470565b91505092915050565b6000602082840312156104d557600080fd5b60006104e384828501610485565b91505092915050565b6104f5816105f0565b82525050565b60006105086026836105df565b91506105138261062c565b604082019050919050565b600061052b6010836105df565b91506105368261067b565b602082019050919050565b600061054e6020836105df565b9150610559826106a4565b602082019050919050565b600060208201905061057960008301846104ec565b92915050565b60006020820190508181036000830152610598816104fb565b9050919050565b600060208201905081810360008301526105b88161051e565b9050919050565b600060208201905081810360008301526105d881610541565b9050919050565b600082825260208201905092915050565b60006105fb8261060c565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642050617373776f726400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6106d6816105f0565b81146106e157600080fd5b50565b6106ed81610602565b81146106f857600080fd5b5056fea2646970667358221220f494411e80ac571e8979ed195a357fa508b4a8e9a70d53a09d9247417e25a9eb64736f6c63430008010033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _password: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Vault> {
    return super.deploy(_password, overrides || {}) as Promise<Vault>;
  }
  override getDeployTransaction(
    _password: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_password, overrides || {});
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
